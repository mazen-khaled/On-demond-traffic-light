
TrafficLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c86  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800060  00800060  00000cfa  2**0
                  ALLOC
  2 .stab         000018a8  00000000  00000000  00000cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000171d  00000000  00000000  000025a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 28 00 	jmp	0x50	; 0x50 <__ctors_end>
   4:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__vector_1>
   8:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__vector_2>
   c:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <__vector_3>
  10:	0c 94 3a 00 	jmp	0x74	; 0x74 <__bad_interrupt>
  14:	0c 94 3a 00 	jmp	0x74	; 0x74 <__bad_interrupt>
  18:	0c 94 3a 00 	jmp	0x74	; 0x74 <__bad_interrupt>
  1c:	0c 94 3a 00 	jmp	0x74	; 0x74 <__bad_interrupt>
  20:	0c 94 3a 00 	jmp	0x74	; 0x74 <__bad_interrupt>
  24:	0c 94 3a 00 	jmp	0x74	; 0x74 <__bad_interrupt>
  28:	0c 94 3a 00 	jmp	0x74	; 0x74 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_11>
  30:	0c 94 3a 00 	jmp	0x74	; 0x74 <__bad_interrupt>
  34:	0c 94 3a 00 	jmp	0x74	; 0x74 <__bad_interrupt>
  38:	0c 94 3a 00 	jmp	0x74	; 0x74 <__bad_interrupt>
  3c:	0c 94 3a 00 	jmp	0x74	; 0x74 <__bad_interrupt>
  40:	0c 94 3a 00 	jmp	0x74	; 0x74 <__bad_interrupt>
  44:	0c 94 3a 00 	jmp	0x74	; 0x74 <__bad_interrupt>
  48:	0c 94 3a 00 	jmp	0x74	; 0x74 <__bad_interrupt>
  4c:	0c 94 3a 00 	jmp	0x74	; 0x74 <__bad_interrupt>

00000050 <__ctors_end>:
  50:	11 24       	eor	r1, r1
  52:	1f be       	out	0x3f, r1	; 63
  54:	cf e5       	ldi	r28, 0x5F	; 95
  56:	d8 e0       	ldi	r29, 0x08	; 8
  58:	de bf       	out	0x3e, r29	; 62
  5a:	cd bf       	out	0x3d, r28	; 61

0000005c <__do_clear_bss>:
  5c:	10 e0       	ldi	r17, 0x00	; 0
  5e:	a0 e6       	ldi	r26, 0x60	; 96
  60:	b0 e0       	ldi	r27, 0x00	; 0
  62:	01 c0       	rjmp	.+2      	; 0x66 <.do_clear_bss_start>

00000064 <.do_clear_bss_loop>:
  64:	1d 92       	st	X+, r1

00000066 <.do_clear_bss_start>:
  66:	a8 36       	cpi	r26, 0x68	; 104
  68:	b1 07       	cpc	r27, r17
  6a:	e1 f7       	brne	.-8      	; 0x64 <.do_clear_bss_loop>
  6c:	0e 94 c3 05 	call	0xb86	; 0xb86 <main>
  70:	0c 94 41 06 	jmp	0xc82	; 0xc82 <_exit>

00000074 <__bad_interrupt>:
  74:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000078 <Timer0_Init_Normal_Mode>:
 * For System Clock=1Mhz and timer prescaler is F_CPU/1024.
 * Timer frequency will be around 1Khz, Ttimer = 1ms
 * For initial timer counter = 6, overflow will occur every 250ms (6 --> 255 --> 6)
 * Overflow interrupt will be generated every 250ms, so we need two overflow interrupts to count 0.5second.
 */
void Timer0_Init_Normal_Mode(void){
  78:	df 93       	push	r29
  7a:	cf 93       	push	r28
  7c:	cd b7       	in	r28, 0x3d	; 61
  7e:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 6; //Set Timer initial value to 6
  80:	e2 e5       	ldi	r30, 0x52	; 82
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	86 e0       	ldi	r24, 0x06	; 6
  86:	80 83       	st	Z, r24
	TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
  88:	a9 e5       	ldi	r26, 0x59	; 89
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	e9 e5       	ldi	r30, 0x59	; 89
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	81 60       	ori	r24, 0x01	; 1
  94:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
  96:	e3 e5       	ldi	r30, 0x53	; 83
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	85 e8       	ldi	r24, 0x85	; 133
  9c:	80 83       	st	Z, r24
}
  9e:	cf 91       	pop	r28
  a0:	df 91       	pop	r29
  a2:	08 95       	ret

000000a4 <__vector_11>:

ISR(TIMER0_OVF_vect){
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 6; 			// start the timer counting again after every overflow from 6.
  bc:	e2 e5       	ldi	r30, 0x52	; 82
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	86 e0       	ldi	r24, 0x06	; 6
  c2:	80 83       	st	Z, r24
	HALF_SEC_TICKS++;	//Ticks for 1/2 sec
  c4:	80 91 62 00 	lds	r24, 0x0062
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	80 93 62 00 	sts	0x0062, r24
	FIVE_SEC_TICKS++;	//Ticks every 5 sec
  ce:	80 91 60 00 	lds	r24, 0x0060
  d2:	8f 5f       	subi	r24, 0xFF	; 255
  d4:	80 93 60 00 	sts	0x0060, r24

	/*Half Second Clock Flag Generation*/
	if (HALF_SEC_TICKS == NUMBER_OF_OVERFLOWS_PER_HALF_SECOND){
  d8:	80 91 62 00 	lds	r24, 0x0062
  dc:	82 30       	cpi	r24, 0x02	; 2
  de:	29 f4       	brne	.+10     	; 0xea <__vector_11+0x46>
		TIMER0_FLAG_HALF_SEC = 1;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 63 00 	sts	0x0063, r24
		HALF_SEC_TICKS = 0;
  e6:	10 92 62 00 	sts	0x0062, r1
	}

	/*5 Second End Clock Flag Generation*/
	if(FIVE_SEC_TICKS == NUMBER_OF_OVERFLOWS_PER_5_SECOND){
  ea:	80 91 60 00 	lds	r24, 0x0060
  ee:	84 31       	cpi	r24, 0x14	; 20
  f0:	29 f4       	brne	.+10     	; 0xfc <__vector_11+0x58>
		TIMER0_FLAG_5_SEC = 1;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	80 93 61 00 	sts	0x0061, r24
		FIVE_SEC_TICKS = 0;
  f8:	10 92 60 00 	sts	0x0060, r1
	}
}
  fc:	cf 91       	pop	r28
  fe:	df 91       	pop	r29
 100:	ff 91       	pop	r31
 102:	ef 91       	pop	r30
 104:	8f 91       	pop	r24
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
 110:	df 93       	push	r29
 112:	cf 93       	push	r28
 114:	00 d0       	rcall	.+0      	; 0x116 <GPIO_setupPinDirection+0x6>
 116:	00 d0       	rcall	.+0      	; 0x118 <GPIO_setupPinDirection+0x8>
 118:	0f 92       	push	r0
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	89 83       	std	Y+1, r24	; 0x01
 120:	6a 83       	std	Y+2, r22	; 0x02
 122:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 124:	8a 81       	ldd	r24, Y+2	; 0x02
 126:	88 30       	cpi	r24, 0x08	; 8
 128:	08 f0       	brcs	.+2      	; 0x12c <GPIO_setupPinDirection+0x1c>
 12a:	d5 c0       	rjmp	.+426    	; 0x2d6 <GPIO_setupPinDirection+0x1c6>
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	84 30       	cpi	r24, 0x04	; 4
 130:	08 f0       	brcs	.+2      	; 0x134 <GPIO_setupPinDirection+0x24>
 132:	d1 c0       	rjmp	.+418    	; 0x2d6 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	28 2f       	mov	r18, r24
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	3d 83       	std	Y+5, r19	; 0x05
 13c:	2c 83       	std	Y+4, r18	; 0x04
 13e:	8c 81       	ldd	r24, Y+4	; 0x04
 140:	9d 81       	ldd	r25, Y+5	; 0x05
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	91 05       	cpc	r25, r1
 146:	09 f4       	brne	.+2      	; 0x14a <GPIO_setupPinDirection+0x3a>
 148:	43 c0       	rjmp	.+134    	; 0x1d0 <GPIO_setupPinDirection+0xc0>
 14a:	2c 81       	ldd	r18, Y+4	; 0x04
 14c:	3d 81       	ldd	r19, Y+5	; 0x05
 14e:	22 30       	cpi	r18, 0x02	; 2
 150:	31 05       	cpc	r19, r1
 152:	2c f4       	brge	.+10     	; 0x15e <GPIO_setupPinDirection+0x4e>
 154:	8c 81       	ldd	r24, Y+4	; 0x04
 156:	9d 81       	ldd	r25, Y+5	; 0x05
 158:	00 97       	sbiw	r24, 0x00	; 0
 15a:	71 f0       	breq	.+28     	; 0x178 <GPIO_setupPinDirection+0x68>
 15c:	bc c0       	rjmp	.+376    	; 0x2d6 <GPIO_setupPinDirection+0x1c6>
 15e:	2c 81       	ldd	r18, Y+4	; 0x04
 160:	3d 81       	ldd	r19, Y+5	; 0x05
 162:	22 30       	cpi	r18, 0x02	; 2
 164:	31 05       	cpc	r19, r1
 166:	09 f4       	brne	.+2      	; 0x16a <GPIO_setupPinDirection+0x5a>
 168:	5f c0       	rjmp	.+190    	; 0x228 <GPIO_setupPinDirection+0x118>
 16a:	8c 81       	ldd	r24, Y+4	; 0x04
 16c:	9d 81       	ldd	r25, Y+5	; 0x05
 16e:	83 30       	cpi	r24, 0x03	; 3
 170:	91 05       	cpc	r25, r1
 172:	09 f4       	brne	.+2      	; 0x176 <GPIO_setupPinDirection+0x66>
 174:	85 c0       	rjmp	.+266    	; 0x280 <GPIO_setupPinDirection+0x170>
 176:	af c0       	rjmp	.+350    	; 0x2d6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
 178:	8b 81       	ldd	r24, Y+3	; 0x03
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	a1 f4       	brne	.+40     	; 0x1a6 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
 17e:	aa e3       	ldi	r26, 0x3A	; 58
 180:	b0 e0       	ldi	r27, 0x00	; 0
 182:	ea e3       	ldi	r30, 0x3A	; 58
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	48 2f       	mov	r20, r24
 18a:	8a 81       	ldd	r24, Y+2	; 0x02
 18c:	28 2f       	mov	r18, r24
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 2e       	mov	r0, r18
 196:	02 c0       	rjmp	.+4      	; 0x19c <GPIO_setupPinDirection+0x8c>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	0a 94       	dec	r0
 19e:	e2 f7       	brpl	.-8      	; 0x198 <GPIO_setupPinDirection+0x88>
 1a0:	84 2b       	or	r24, r20
 1a2:	8c 93       	st	X, r24
 1a4:	98 c0       	rjmp	.+304    	; 0x2d6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
 1a6:	aa e3       	ldi	r26, 0x3A	; 58
 1a8:	b0 e0       	ldi	r27, 0x00	; 0
 1aa:	ea e3       	ldi	r30, 0x3A	; 58
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	48 2f       	mov	r20, r24
 1b2:	8a 81       	ldd	r24, Y+2	; 0x02
 1b4:	28 2f       	mov	r18, r24
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 2e       	mov	r0, r18
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <GPIO_setupPinDirection+0xb4>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	0a 94       	dec	r0
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <GPIO_setupPinDirection+0xb0>
 1c8:	80 95       	com	r24
 1ca:	84 23       	and	r24, r20
 1cc:	8c 93       	st	X, r24
 1ce:	83 c0       	rjmp	.+262    	; 0x2d6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
 1d0:	8b 81       	ldd	r24, Y+3	; 0x03
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	a1 f4       	brne	.+40     	; 0x1fe <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
 1d6:	a7 e3       	ldi	r26, 0x37	; 55
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
 1da:	e7 e3       	ldi	r30, 0x37	; 55
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	48 2f       	mov	r20, r24
 1e2:	8a 81       	ldd	r24, Y+2	; 0x02
 1e4:	28 2f       	mov	r18, r24
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 2e       	mov	r0, r18
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <GPIO_setupPinDirection+0xe4>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	0a 94       	dec	r0
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <GPIO_setupPinDirection+0xe0>
 1f8:	84 2b       	or	r24, r20
 1fa:	8c 93       	st	X, r24
 1fc:	6c c0       	rjmp	.+216    	; 0x2d6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
 1fe:	a7 e3       	ldi	r26, 0x37	; 55
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	e7 e3       	ldi	r30, 0x37	; 55
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	48 2f       	mov	r20, r24
 20a:	8a 81       	ldd	r24, Y+2	; 0x02
 20c:	28 2f       	mov	r18, r24
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 2e       	mov	r0, r18
 216:	02 c0       	rjmp	.+4      	; 0x21c <GPIO_setupPinDirection+0x10c>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	0a 94       	dec	r0
 21e:	e2 f7       	brpl	.-8      	; 0x218 <GPIO_setupPinDirection+0x108>
 220:	80 95       	com	r24
 222:	84 23       	and	r24, r20
 224:	8c 93       	st	X, r24
 226:	57 c0       	rjmp	.+174    	; 0x2d6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
 228:	8b 81       	ldd	r24, Y+3	; 0x03
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	a1 f4       	brne	.+40     	; 0x256 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
 22e:	a4 e3       	ldi	r26, 0x34	; 52
 230:	b0 e0       	ldi	r27, 0x00	; 0
 232:	e4 e3       	ldi	r30, 0x34	; 52
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	48 2f       	mov	r20, r24
 23a:	8a 81       	ldd	r24, Y+2	; 0x02
 23c:	28 2f       	mov	r18, r24
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 2e       	mov	r0, r18
 246:	02 c0       	rjmp	.+4      	; 0x24c <GPIO_setupPinDirection+0x13c>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	0a 94       	dec	r0
 24e:	e2 f7       	brpl	.-8      	; 0x248 <GPIO_setupPinDirection+0x138>
 250:	84 2b       	or	r24, r20
 252:	8c 93       	st	X, r24
 254:	40 c0       	rjmp	.+128    	; 0x2d6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
 256:	a4 e3       	ldi	r26, 0x34	; 52
 258:	b0 e0       	ldi	r27, 0x00	; 0
 25a:	e4 e3       	ldi	r30, 0x34	; 52
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	48 2f       	mov	r20, r24
 262:	8a 81       	ldd	r24, Y+2	; 0x02
 264:	28 2f       	mov	r18, r24
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 2e       	mov	r0, r18
 26e:	02 c0       	rjmp	.+4      	; 0x274 <GPIO_setupPinDirection+0x164>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	0a 94       	dec	r0
 276:	e2 f7       	brpl	.-8      	; 0x270 <GPIO_setupPinDirection+0x160>
 278:	80 95       	com	r24
 27a:	84 23       	and	r24, r20
 27c:	8c 93       	st	X, r24
 27e:	2b c0       	rjmp	.+86     	; 0x2d6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
 280:	8b 81       	ldd	r24, Y+3	; 0x03
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	a1 f4       	brne	.+40     	; 0x2ae <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
 286:	a1 e3       	ldi	r26, 0x31	; 49
 288:	b0 e0       	ldi	r27, 0x00	; 0
 28a:	e1 e3       	ldi	r30, 0x31	; 49
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	48 2f       	mov	r20, r24
 292:	8a 81       	ldd	r24, Y+2	; 0x02
 294:	28 2f       	mov	r18, r24
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 2e       	mov	r0, r18
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <GPIO_setupPinDirection+0x194>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	0a 94       	dec	r0
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <GPIO_setupPinDirection+0x190>
 2a8:	84 2b       	or	r24, r20
 2aa:	8c 93       	st	X, r24
 2ac:	14 c0       	rjmp	.+40     	; 0x2d6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
 2ae:	a1 e3       	ldi	r26, 0x31	; 49
 2b0:	b0 e0       	ldi	r27, 0x00	; 0
 2b2:	e1 e3       	ldi	r30, 0x31	; 49
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	48 2f       	mov	r20, r24
 2ba:	8a 81       	ldd	r24, Y+2	; 0x02
 2bc:	28 2f       	mov	r18, r24
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	02 2e       	mov	r0, r18
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <GPIO_setupPinDirection+0x1bc>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	0a 94       	dec	r0
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <GPIO_setupPinDirection+0x1b8>
 2d0:	80 95       	com	r24
 2d2:	84 23       	and	r24, r20
 2d4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	0f 90       	pop	r0
 2e0:	cf 91       	pop	r28
 2e2:	df 91       	pop	r29
 2e4:	08 95       	ret

000002e6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
 2e6:	df 93       	push	r29
 2e8:	cf 93       	push	r28
 2ea:	00 d0       	rcall	.+0      	; 0x2ec <GPIO_writePin+0x6>
 2ec:	00 d0       	rcall	.+0      	; 0x2ee <GPIO_writePin+0x8>
 2ee:	0f 92       	push	r0
 2f0:	cd b7       	in	r28, 0x3d	; 61
 2f2:	de b7       	in	r29, 0x3e	; 62
 2f4:	89 83       	std	Y+1, r24	; 0x01
 2f6:	6a 83       	std	Y+2, r22	; 0x02
 2f8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 2fa:	8a 81       	ldd	r24, Y+2	; 0x02
 2fc:	88 30       	cpi	r24, 0x08	; 8
 2fe:	08 f0       	brcs	.+2      	; 0x302 <GPIO_writePin+0x1c>
 300:	d5 c0       	rjmp	.+426    	; 0x4ac <GPIO_writePin+0x1c6>
 302:	89 81       	ldd	r24, Y+1	; 0x01
 304:	84 30       	cpi	r24, 0x04	; 4
 306:	08 f0       	brcs	.+2      	; 0x30a <GPIO_writePin+0x24>
 308:	d1 c0       	rjmp	.+418    	; 0x4ac <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	28 2f       	mov	r18, r24
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	3d 83       	std	Y+5, r19	; 0x05
 312:	2c 83       	std	Y+4, r18	; 0x04
 314:	8c 81       	ldd	r24, Y+4	; 0x04
 316:	9d 81       	ldd	r25, Y+5	; 0x05
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	91 05       	cpc	r25, r1
 31c:	09 f4       	brne	.+2      	; 0x320 <GPIO_writePin+0x3a>
 31e:	43 c0       	rjmp	.+134    	; 0x3a6 <GPIO_writePin+0xc0>
 320:	2c 81       	ldd	r18, Y+4	; 0x04
 322:	3d 81       	ldd	r19, Y+5	; 0x05
 324:	22 30       	cpi	r18, 0x02	; 2
 326:	31 05       	cpc	r19, r1
 328:	2c f4       	brge	.+10     	; 0x334 <GPIO_writePin+0x4e>
 32a:	8c 81       	ldd	r24, Y+4	; 0x04
 32c:	9d 81       	ldd	r25, Y+5	; 0x05
 32e:	00 97       	sbiw	r24, 0x00	; 0
 330:	71 f0       	breq	.+28     	; 0x34e <GPIO_writePin+0x68>
 332:	bc c0       	rjmp	.+376    	; 0x4ac <GPIO_writePin+0x1c6>
 334:	2c 81       	ldd	r18, Y+4	; 0x04
 336:	3d 81       	ldd	r19, Y+5	; 0x05
 338:	22 30       	cpi	r18, 0x02	; 2
 33a:	31 05       	cpc	r19, r1
 33c:	09 f4       	brne	.+2      	; 0x340 <GPIO_writePin+0x5a>
 33e:	5f c0       	rjmp	.+190    	; 0x3fe <GPIO_writePin+0x118>
 340:	8c 81       	ldd	r24, Y+4	; 0x04
 342:	9d 81       	ldd	r25, Y+5	; 0x05
 344:	83 30       	cpi	r24, 0x03	; 3
 346:	91 05       	cpc	r25, r1
 348:	09 f4       	brne	.+2      	; 0x34c <GPIO_writePin+0x66>
 34a:	85 c0       	rjmp	.+266    	; 0x456 <GPIO_writePin+0x170>
 34c:	af c0       	rjmp	.+350    	; 0x4ac <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
 34e:	8b 81       	ldd	r24, Y+3	; 0x03
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	a1 f4       	brne	.+40     	; 0x37c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
 354:	ab e3       	ldi	r26, 0x3B	; 59
 356:	b0 e0       	ldi	r27, 0x00	; 0
 358:	eb e3       	ldi	r30, 0x3B	; 59
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	48 2f       	mov	r20, r24
 360:	8a 81       	ldd	r24, Y+2	; 0x02
 362:	28 2f       	mov	r18, r24
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 2e       	mov	r0, r18
 36c:	02 c0       	rjmp	.+4      	; 0x372 <GPIO_writePin+0x8c>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	0a 94       	dec	r0
 374:	e2 f7       	brpl	.-8      	; 0x36e <GPIO_writePin+0x88>
 376:	84 2b       	or	r24, r20
 378:	8c 93       	st	X, r24
 37a:	98 c0       	rjmp	.+304    	; 0x4ac <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 37c:	ab e3       	ldi	r26, 0x3B	; 59
 37e:	b0 e0       	ldi	r27, 0x00	; 0
 380:	eb e3       	ldi	r30, 0x3B	; 59
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	48 2f       	mov	r20, r24
 388:	8a 81       	ldd	r24, Y+2	; 0x02
 38a:	28 2f       	mov	r18, r24
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	02 2e       	mov	r0, r18
 394:	02 c0       	rjmp	.+4      	; 0x39a <GPIO_writePin+0xb4>
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	0a 94       	dec	r0
 39c:	e2 f7       	brpl	.-8      	; 0x396 <GPIO_writePin+0xb0>
 39e:	80 95       	com	r24
 3a0:	84 23       	and	r24, r20
 3a2:	8c 93       	st	X, r24
 3a4:	83 c0       	rjmp	.+262    	; 0x4ac <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
 3a6:	8b 81       	ldd	r24, Y+3	; 0x03
 3a8:	81 30       	cpi	r24, 0x01	; 1
 3aa:	a1 f4       	brne	.+40     	; 0x3d4 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
 3ac:	a8 e3       	ldi	r26, 0x38	; 56
 3ae:	b0 e0       	ldi	r27, 0x00	; 0
 3b0:	e8 e3       	ldi	r30, 0x38	; 56
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	48 2f       	mov	r20, r24
 3b8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ba:	28 2f       	mov	r18, r24
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 2e       	mov	r0, r18
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <GPIO_writePin+0xe4>
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	0a 94       	dec	r0
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <GPIO_writePin+0xe0>
 3ce:	84 2b       	or	r24, r20
 3d0:	8c 93       	st	X, r24
 3d2:	6c c0       	rjmp	.+216    	; 0x4ac <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
 3d4:	a8 e3       	ldi	r26, 0x38	; 56
 3d6:	b0 e0       	ldi	r27, 0x00	; 0
 3d8:	e8 e3       	ldi	r30, 0x38	; 56
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	48 2f       	mov	r20, r24
 3e0:	8a 81       	ldd	r24, Y+2	; 0x02
 3e2:	28 2f       	mov	r18, r24
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	02 2e       	mov	r0, r18
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <GPIO_writePin+0x10c>
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	0a 94       	dec	r0
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <GPIO_writePin+0x108>
 3f6:	80 95       	com	r24
 3f8:	84 23       	and	r24, r20
 3fa:	8c 93       	st	X, r24
 3fc:	57 c0       	rjmp	.+174    	; 0x4ac <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
 3fe:	8b 81       	ldd	r24, Y+3	; 0x03
 400:	81 30       	cpi	r24, 0x01	; 1
 402:	a1 f4       	brne	.+40     	; 0x42c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
 404:	a5 e3       	ldi	r26, 0x35	; 53
 406:	b0 e0       	ldi	r27, 0x00	; 0
 408:	e5 e3       	ldi	r30, 0x35	; 53
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	48 2f       	mov	r20, r24
 410:	8a 81       	ldd	r24, Y+2	; 0x02
 412:	28 2f       	mov	r18, r24
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	02 2e       	mov	r0, r18
 41c:	02 c0       	rjmp	.+4      	; 0x422 <GPIO_writePin+0x13c>
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	0a 94       	dec	r0
 424:	e2 f7       	brpl	.-8      	; 0x41e <GPIO_writePin+0x138>
 426:	84 2b       	or	r24, r20
 428:	8c 93       	st	X, r24
 42a:	40 c0       	rjmp	.+128    	; 0x4ac <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
 42c:	a5 e3       	ldi	r26, 0x35	; 53
 42e:	b0 e0       	ldi	r27, 0x00	; 0
 430:	e5 e3       	ldi	r30, 0x35	; 53
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	48 2f       	mov	r20, r24
 438:	8a 81       	ldd	r24, Y+2	; 0x02
 43a:	28 2f       	mov	r18, r24
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 2e       	mov	r0, r18
 444:	02 c0       	rjmp	.+4      	; 0x44a <GPIO_writePin+0x164>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	0a 94       	dec	r0
 44c:	e2 f7       	brpl	.-8      	; 0x446 <GPIO_writePin+0x160>
 44e:	80 95       	com	r24
 450:	84 23       	and	r24, r20
 452:	8c 93       	st	X, r24
 454:	2b c0       	rjmp	.+86     	; 0x4ac <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
 456:	8b 81       	ldd	r24, Y+3	; 0x03
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	a1 f4       	brne	.+40     	; 0x484 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
 45c:	a2 e3       	ldi	r26, 0x32	; 50
 45e:	b0 e0       	ldi	r27, 0x00	; 0
 460:	e2 e3       	ldi	r30, 0x32	; 50
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	48 2f       	mov	r20, r24
 468:	8a 81       	ldd	r24, Y+2	; 0x02
 46a:	28 2f       	mov	r18, r24
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	02 2e       	mov	r0, r18
 474:	02 c0       	rjmp	.+4      	; 0x47a <GPIO_writePin+0x194>
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	0a 94       	dec	r0
 47c:	e2 f7       	brpl	.-8      	; 0x476 <GPIO_writePin+0x190>
 47e:	84 2b       	or	r24, r20
 480:	8c 93       	st	X, r24
 482:	14 c0       	rjmp	.+40     	; 0x4ac <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
 484:	a2 e3       	ldi	r26, 0x32	; 50
 486:	b0 e0       	ldi	r27, 0x00	; 0
 488:	e2 e3       	ldi	r30, 0x32	; 50
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	80 81       	ld	r24, Z
 48e:	48 2f       	mov	r20, r24
 490:	8a 81       	ldd	r24, Y+2	; 0x02
 492:	28 2f       	mov	r18, r24
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	02 2e       	mov	r0, r18
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <GPIO_writePin+0x1bc>
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	0a 94       	dec	r0
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <GPIO_writePin+0x1b8>
 4a6:	80 95       	com	r24
 4a8:	84 23       	and	r24, r20
 4aa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 4ac:	0f 90       	pop	r0
 4ae:	0f 90       	pop	r0
 4b0:	0f 90       	pop	r0
 4b2:	0f 90       	pop	r0
 4b4:	0f 90       	pop	r0
 4b6:	cf 91       	pop	r28
 4b8:	df 91       	pop	r29
 4ba:	08 95       	ret

000004bc <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
 4bc:	df 93       	push	r29
 4be:	cf 93       	push	r28
 4c0:	00 d0       	rcall	.+0      	; 0x4c2 <GPIO_readPin+0x6>
 4c2:	00 d0       	rcall	.+0      	; 0x4c4 <GPIO_readPin+0x8>
 4c4:	0f 92       	push	r0
 4c6:	cd b7       	in	r28, 0x3d	; 61
 4c8:	de b7       	in	r29, 0x3e	; 62
 4ca:	8a 83       	std	Y+2, r24	; 0x02
 4cc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
 4ce:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 4d0:	8b 81       	ldd	r24, Y+3	; 0x03
 4d2:	88 30       	cpi	r24, 0x08	; 8
 4d4:	08 f0       	brcs	.+2      	; 0x4d8 <GPIO_readPin+0x1c>
 4d6:	84 c0       	rjmp	.+264    	; 0x5e0 <GPIO_readPin+0x124>
 4d8:	8a 81       	ldd	r24, Y+2	; 0x02
 4da:	84 30       	cpi	r24, 0x04	; 4
 4dc:	08 f0       	brcs	.+2      	; 0x4e0 <GPIO_readPin+0x24>
 4de:	80 c0       	rjmp	.+256    	; 0x5e0 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
 4e0:	8a 81       	ldd	r24, Y+2	; 0x02
 4e2:	28 2f       	mov	r18, r24
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	3d 83       	std	Y+5, r19	; 0x05
 4e8:	2c 83       	std	Y+4, r18	; 0x04
 4ea:	4c 81       	ldd	r20, Y+4	; 0x04
 4ec:	5d 81       	ldd	r21, Y+5	; 0x05
 4ee:	41 30       	cpi	r20, 0x01	; 1
 4f0:	51 05       	cpc	r21, r1
 4f2:	79 f1       	breq	.+94     	; 0x552 <GPIO_readPin+0x96>
 4f4:	8c 81       	ldd	r24, Y+4	; 0x04
 4f6:	9d 81       	ldd	r25, Y+5	; 0x05
 4f8:	82 30       	cpi	r24, 0x02	; 2
 4fa:	91 05       	cpc	r25, r1
 4fc:	34 f4       	brge	.+12     	; 0x50a <GPIO_readPin+0x4e>
 4fe:	2c 81       	ldd	r18, Y+4	; 0x04
 500:	3d 81       	ldd	r19, Y+5	; 0x05
 502:	21 15       	cp	r18, r1
 504:	31 05       	cpc	r19, r1
 506:	69 f0       	breq	.+26     	; 0x522 <GPIO_readPin+0x66>
 508:	6b c0       	rjmp	.+214    	; 0x5e0 <GPIO_readPin+0x124>
 50a:	4c 81       	ldd	r20, Y+4	; 0x04
 50c:	5d 81       	ldd	r21, Y+5	; 0x05
 50e:	42 30       	cpi	r20, 0x02	; 2
 510:	51 05       	cpc	r21, r1
 512:	b9 f1       	breq	.+110    	; 0x582 <GPIO_readPin+0xc6>
 514:	8c 81       	ldd	r24, Y+4	; 0x04
 516:	9d 81       	ldd	r25, Y+5	; 0x05
 518:	83 30       	cpi	r24, 0x03	; 3
 51a:	91 05       	cpc	r25, r1
 51c:	09 f4       	brne	.+2      	; 0x520 <GPIO_readPin+0x64>
 51e:	49 c0       	rjmp	.+146    	; 0x5b2 <GPIO_readPin+0xf6>
 520:	5f c0       	rjmp	.+190    	; 0x5e0 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
 522:	e9 e3       	ldi	r30, 0x39	; 57
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	80 81       	ld	r24, Z
 528:	28 2f       	mov	r18, r24
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	8b 81       	ldd	r24, Y+3	; 0x03
 52e:	88 2f       	mov	r24, r24
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	a9 01       	movw	r20, r18
 534:	02 c0       	rjmp	.+4      	; 0x53a <GPIO_readPin+0x7e>
 536:	55 95       	asr	r21
 538:	47 95       	ror	r20
 53a:	8a 95       	dec	r24
 53c:	e2 f7       	brpl	.-8      	; 0x536 <GPIO_readPin+0x7a>
 53e:	ca 01       	movw	r24, r20
 540:	81 70       	andi	r24, 0x01	; 1
 542:	90 70       	andi	r25, 0x00	; 0
 544:	88 23       	and	r24, r24
 546:	19 f0       	breq	.+6      	; 0x54e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	89 83       	std	Y+1, r24	; 0x01
 54c:	49 c0       	rjmp	.+146    	; 0x5e0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 54e:	19 82       	std	Y+1, r1	; 0x01
 550:	47 c0       	rjmp	.+142    	; 0x5e0 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
 552:	e6 e3       	ldi	r30, 0x36	; 54
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	80 81       	ld	r24, Z
 558:	28 2f       	mov	r18, r24
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	8b 81       	ldd	r24, Y+3	; 0x03
 55e:	88 2f       	mov	r24, r24
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	a9 01       	movw	r20, r18
 564:	02 c0       	rjmp	.+4      	; 0x56a <GPIO_readPin+0xae>
 566:	55 95       	asr	r21
 568:	47 95       	ror	r20
 56a:	8a 95       	dec	r24
 56c:	e2 f7       	brpl	.-8      	; 0x566 <GPIO_readPin+0xaa>
 56e:	ca 01       	movw	r24, r20
 570:	81 70       	andi	r24, 0x01	; 1
 572:	90 70       	andi	r25, 0x00	; 0
 574:	88 23       	and	r24, r24
 576:	19 f0       	breq	.+6      	; 0x57e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	89 83       	std	Y+1, r24	; 0x01
 57c:	31 c0       	rjmp	.+98     	; 0x5e0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 57e:	19 82       	std	Y+1, r1	; 0x01
 580:	2f c0       	rjmp	.+94     	; 0x5e0 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
 582:	e3 e3       	ldi	r30, 0x33	; 51
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	80 81       	ld	r24, Z
 588:	28 2f       	mov	r18, r24
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	8b 81       	ldd	r24, Y+3	; 0x03
 58e:	88 2f       	mov	r24, r24
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	a9 01       	movw	r20, r18
 594:	02 c0       	rjmp	.+4      	; 0x59a <GPIO_readPin+0xde>
 596:	55 95       	asr	r21
 598:	47 95       	ror	r20
 59a:	8a 95       	dec	r24
 59c:	e2 f7       	brpl	.-8      	; 0x596 <GPIO_readPin+0xda>
 59e:	ca 01       	movw	r24, r20
 5a0:	81 70       	andi	r24, 0x01	; 1
 5a2:	90 70       	andi	r25, 0x00	; 0
 5a4:	88 23       	and	r24, r24
 5a6:	19 f0       	breq	.+6      	; 0x5ae <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	89 83       	std	Y+1, r24	; 0x01
 5ac:	19 c0       	rjmp	.+50     	; 0x5e0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 5ae:	19 82       	std	Y+1, r1	; 0x01
 5b0:	17 c0       	rjmp	.+46     	; 0x5e0 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
 5b2:	e0 e3       	ldi	r30, 0x30	; 48
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
 5b8:	28 2f       	mov	r18, r24
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	8b 81       	ldd	r24, Y+3	; 0x03
 5be:	88 2f       	mov	r24, r24
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	a9 01       	movw	r20, r18
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <GPIO_readPin+0x10e>
 5c6:	55 95       	asr	r21
 5c8:	47 95       	ror	r20
 5ca:	8a 95       	dec	r24
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <GPIO_readPin+0x10a>
 5ce:	ca 01       	movw	r24, r20
 5d0:	81 70       	andi	r24, 0x01	; 1
 5d2:	90 70       	andi	r25, 0x00	; 0
 5d4:	88 23       	and	r24, r24
 5d6:	19 f0       	breq	.+6      	; 0x5de <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	89 83       	std	Y+1, r24	; 0x01
 5dc:	01 c0       	rjmp	.+2      	; 0x5e0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 5de:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
 5e0:	89 81       	ldd	r24, Y+1	; 0x01
}
 5e2:	0f 90       	pop	r0
 5e4:	0f 90       	pop	r0
 5e6:	0f 90       	pop	r0
 5e8:	0f 90       	pop	r0
 5ea:	0f 90       	pop	r0
 5ec:	cf 91       	pop	r28
 5ee:	df 91       	pop	r29
 5f0:	08 95       	ret

000005f2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
 5f2:	df 93       	push	r29
 5f4:	cf 93       	push	r28
 5f6:	00 d0       	rcall	.+0      	; 0x5f8 <GPIO_setupPortDirection+0x6>
 5f8:	00 d0       	rcall	.+0      	; 0x5fa <GPIO_setupPortDirection+0x8>
 5fa:	cd b7       	in	r28, 0x3d	; 61
 5fc:	de b7       	in	r29, 0x3e	; 62
 5fe:	89 83       	std	Y+1, r24	; 0x01
 600:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 602:	89 81       	ldd	r24, Y+1	; 0x01
 604:	84 30       	cpi	r24, 0x04	; 4
 606:	90 f5       	brcc	.+100    	; 0x66c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
 608:	89 81       	ldd	r24, Y+1	; 0x01
 60a:	28 2f       	mov	r18, r24
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	3c 83       	std	Y+4, r19	; 0x04
 610:	2b 83       	std	Y+3, r18	; 0x03
 612:	8b 81       	ldd	r24, Y+3	; 0x03
 614:	9c 81       	ldd	r25, Y+4	; 0x04
 616:	81 30       	cpi	r24, 0x01	; 1
 618:	91 05       	cpc	r25, r1
 61a:	d1 f0       	breq	.+52     	; 0x650 <GPIO_setupPortDirection+0x5e>
 61c:	2b 81       	ldd	r18, Y+3	; 0x03
 61e:	3c 81       	ldd	r19, Y+4	; 0x04
 620:	22 30       	cpi	r18, 0x02	; 2
 622:	31 05       	cpc	r19, r1
 624:	2c f4       	brge	.+10     	; 0x630 <GPIO_setupPortDirection+0x3e>
 626:	8b 81       	ldd	r24, Y+3	; 0x03
 628:	9c 81       	ldd	r25, Y+4	; 0x04
 62a:	00 97       	sbiw	r24, 0x00	; 0
 62c:	61 f0       	breq	.+24     	; 0x646 <GPIO_setupPortDirection+0x54>
 62e:	1e c0       	rjmp	.+60     	; 0x66c <GPIO_setupPortDirection+0x7a>
 630:	2b 81       	ldd	r18, Y+3	; 0x03
 632:	3c 81       	ldd	r19, Y+4	; 0x04
 634:	22 30       	cpi	r18, 0x02	; 2
 636:	31 05       	cpc	r19, r1
 638:	81 f0       	breq	.+32     	; 0x65a <GPIO_setupPortDirection+0x68>
 63a:	8b 81       	ldd	r24, Y+3	; 0x03
 63c:	9c 81       	ldd	r25, Y+4	; 0x04
 63e:	83 30       	cpi	r24, 0x03	; 3
 640:	91 05       	cpc	r25, r1
 642:	81 f0       	breq	.+32     	; 0x664 <GPIO_setupPortDirection+0x72>
 644:	13 c0       	rjmp	.+38     	; 0x66c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
 646:	ea e3       	ldi	r30, 0x3A	; 58
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	8a 81       	ldd	r24, Y+2	; 0x02
 64c:	80 83       	st	Z, r24
 64e:	0e c0       	rjmp	.+28     	; 0x66c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
 650:	e7 e3       	ldi	r30, 0x37	; 55
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	8a 81       	ldd	r24, Y+2	; 0x02
 656:	80 83       	st	Z, r24
 658:	09 c0       	rjmp	.+18     	; 0x66c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
 65a:	e4 e3       	ldi	r30, 0x34	; 52
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	8a 81       	ldd	r24, Y+2	; 0x02
 660:	80 83       	st	Z, r24
 662:	04 c0       	rjmp	.+8      	; 0x66c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
 664:	e1 e3       	ldi	r30, 0x31	; 49
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	8a 81       	ldd	r24, Y+2	; 0x02
 66a:	80 83       	st	Z, r24
			break;
		}
	}
}
 66c:	0f 90       	pop	r0
 66e:	0f 90       	pop	r0
 670:	0f 90       	pop	r0
 672:	0f 90       	pop	r0
 674:	cf 91       	pop	r28
 676:	df 91       	pop	r29
 678:	08 95       	ret

0000067a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
 67a:	df 93       	push	r29
 67c:	cf 93       	push	r28
 67e:	00 d0       	rcall	.+0      	; 0x680 <GPIO_writePort+0x6>
 680:	00 d0       	rcall	.+0      	; 0x682 <GPIO_writePort+0x8>
 682:	cd b7       	in	r28, 0x3d	; 61
 684:	de b7       	in	r29, 0x3e	; 62
 686:	89 83       	std	Y+1, r24	; 0x01
 688:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 68a:	89 81       	ldd	r24, Y+1	; 0x01
 68c:	84 30       	cpi	r24, 0x04	; 4
 68e:	90 f5       	brcc	.+100    	; 0x6f4 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
 690:	89 81       	ldd	r24, Y+1	; 0x01
 692:	28 2f       	mov	r18, r24
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	3c 83       	std	Y+4, r19	; 0x04
 698:	2b 83       	std	Y+3, r18	; 0x03
 69a:	8b 81       	ldd	r24, Y+3	; 0x03
 69c:	9c 81       	ldd	r25, Y+4	; 0x04
 69e:	81 30       	cpi	r24, 0x01	; 1
 6a0:	91 05       	cpc	r25, r1
 6a2:	d1 f0       	breq	.+52     	; 0x6d8 <GPIO_writePort+0x5e>
 6a4:	2b 81       	ldd	r18, Y+3	; 0x03
 6a6:	3c 81       	ldd	r19, Y+4	; 0x04
 6a8:	22 30       	cpi	r18, 0x02	; 2
 6aa:	31 05       	cpc	r19, r1
 6ac:	2c f4       	brge	.+10     	; 0x6b8 <GPIO_writePort+0x3e>
 6ae:	8b 81       	ldd	r24, Y+3	; 0x03
 6b0:	9c 81       	ldd	r25, Y+4	; 0x04
 6b2:	00 97       	sbiw	r24, 0x00	; 0
 6b4:	61 f0       	breq	.+24     	; 0x6ce <GPIO_writePort+0x54>
 6b6:	1e c0       	rjmp	.+60     	; 0x6f4 <GPIO_writePort+0x7a>
 6b8:	2b 81       	ldd	r18, Y+3	; 0x03
 6ba:	3c 81       	ldd	r19, Y+4	; 0x04
 6bc:	22 30       	cpi	r18, 0x02	; 2
 6be:	31 05       	cpc	r19, r1
 6c0:	81 f0       	breq	.+32     	; 0x6e2 <GPIO_writePort+0x68>
 6c2:	8b 81       	ldd	r24, Y+3	; 0x03
 6c4:	9c 81       	ldd	r25, Y+4	; 0x04
 6c6:	83 30       	cpi	r24, 0x03	; 3
 6c8:	91 05       	cpc	r25, r1
 6ca:	81 f0       	breq	.+32     	; 0x6ec <GPIO_writePort+0x72>
 6cc:	13 c0       	rjmp	.+38     	; 0x6f4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
 6ce:	eb e3       	ldi	r30, 0x3B	; 59
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	8a 81       	ldd	r24, Y+2	; 0x02
 6d4:	80 83       	st	Z, r24
 6d6:	0e c0       	rjmp	.+28     	; 0x6f4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
 6d8:	e8 e3       	ldi	r30, 0x38	; 56
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	8a 81       	ldd	r24, Y+2	; 0x02
 6de:	80 83       	st	Z, r24
 6e0:	09 c0       	rjmp	.+18     	; 0x6f4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
 6e2:	e5 e3       	ldi	r30, 0x35	; 53
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	8a 81       	ldd	r24, Y+2	; 0x02
 6e8:	80 83       	st	Z, r24
 6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
 6ec:	e2 e3       	ldi	r30, 0x32	; 50
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	8a 81       	ldd	r24, Y+2	; 0x02
 6f2:	80 83       	st	Z, r24
			break;
		}
	}
}
 6f4:	0f 90       	pop	r0
 6f6:	0f 90       	pop	r0
 6f8:	0f 90       	pop	r0
 6fa:	0f 90       	pop	r0
 6fc:	cf 91       	pop	r28
 6fe:	df 91       	pop	r29
 700:	08 95       	ret

00000702 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
 702:	df 93       	push	r29
 704:	cf 93       	push	r28
 706:	00 d0       	rcall	.+0      	; 0x708 <GPIO_readPort+0x6>
 708:	00 d0       	rcall	.+0      	; 0x70a <GPIO_readPort+0x8>
 70a:	cd b7       	in	r28, 0x3d	; 61
 70c:	de b7       	in	r29, 0x3e	; 62
 70e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
 710:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 712:	8a 81       	ldd	r24, Y+2	; 0x02
 714:	84 30       	cpi	r24, 0x04	; 4
 716:	90 f5       	brcc	.+100    	; 0x77c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
 718:	8a 81       	ldd	r24, Y+2	; 0x02
 71a:	28 2f       	mov	r18, r24
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	3c 83       	std	Y+4, r19	; 0x04
 720:	2b 83       	std	Y+3, r18	; 0x03
 722:	8b 81       	ldd	r24, Y+3	; 0x03
 724:	9c 81       	ldd	r25, Y+4	; 0x04
 726:	81 30       	cpi	r24, 0x01	; 1
 728:	91 05       	cpc	r25, r1
 72a:	d1 f0       	breq	.+52     	; 0x760 <GPIO_readPort+0x5e>
 72c:	2b 81       	ldd	r18, Y+3	; 0x03
 72e:	3c 81       	ldd	r19, Y+4	; 0x04
 730:	22 30       	cpi	r18, 0x02	; 2
 732:	31 05       	cpc	r19, r1
 734:	2c f4       	brge	.+10     	; 0x740 <GPIO_readPort+0x3e>
 736:	8b 81       	ldd	r24, Y+3	; 0x03
 738:	9c 81       	ldd	r25, Y+4	; 0x04
 73a:	00 97       	sbiw	r24, 0x00	; 0
 73c:	61 f0       	breq	.+24     	; 0x756 <GPIO_readPort+0x54>
 73e:	1e c0       	rjmp	.+60     	; 0x77c <GPIO_readPort+0x7a>
 740:	2b 81       	ldd	r18, Y+3	; 0x03
 742:	3c 81       	ldd	r19, Y+4	; 0x04
 744:	22 30       	cpi	r18, 0x02	; 2
 746:	31 05       	cpc	r19, r1
 748:	81 f0       	breq	.+32     	; 0x76a <GPIO_readPort+0x68>
 74a:	8b 81       	ldd	r24, Y+3	; 0x03
 74c:	9c 81       	ldd	r25, Y+4	; 0x04
 74e:	83 30       	cpi	r24, 0x03	; 3
 750:	91 05       	cpc	r25, r1
 752:	81 f0       	breq	.+32     	; 0x774 <GPIO_readPort+0x72>
 754:	13 c0       	rjmp	.+38     	; 0x77c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
 756:	e9 e3       	ldi	r30, 0x39	; 57
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	80 81       	ld	r24, Z
 75c:	89 83       	std	Y+1, r24	; 0x01
 75e:	0e c0       	rjmp	.+28     	; 0x77c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
 760:	e6 e3       	ldi	r30, 0x36	; 54
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	80 81       	ld	r24, Z
 766:	89 83       	std	Y+1, r24	; 0x01
 768:	09 c0       	rjmp	.+18     	; 0x77c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
 76a:	e3 e3       	ldi	r30, 0x33	; 51
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	80 81       	ld	r24, Z
 770:	89 83       	std	Y+1, r24	; 0x01
 772:	04 c0       	rjmp	.+8      	; 0x77c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
 774:	e0 e3       	ldi	r30, 0x30	; 48
 776:	f0 e0       	ldi	r31, 0x00	; 0
 778:	80 81       	ld	r24, Z
 77a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
 77c:	89 81       	ldd	r24, Y+1	; 0x01
}
 77e:	0f 90       	pop	r0
 780:	0f 90       	pop	r0
 782:	0f 90       	pop	r0
 784:	0f 90       	pop	r0
 786:	cf 91       	pop	r28
 788:	df 91       	pop	r29
 78a:	08 95       	ret

0000078c <INT0_Init>:
/*Functions Definitions*/

/*Description : Initialization INT0 For Interrupt
 *Parameters  : Trigger type (LOW_LEVEL - HIGH_LEVEL - RISING_EDGE - FALLING_EDGE)
 * */
void INT0_Init(trigger_type typ){
 78c:	df 93       	push	r29
 78e:	cf 93       	push	r28
 790:	00 d0       	rcall	.+0      	; 0x792 <INT0_Init+0x6>
 792:	0f 92       	push	r0
 794:	cd b7       	in	r28, 0x3d	; 61
 796:	de b7       	in	r29, 0x3e	; 62
 798:	89 83       	std	Y+1, r24	; 0x01
	//Setting PD2/INT0 Pin to be an Input
	CLEAR_BIT(DDRD,PD2);
 79a:	a1 e3       	ldi	r26, 0x31	; 49
 79c:	b0 e0       	ldi	r27, 0x00	; 0
 79e:	e1 e3       	ldi	r30, 0x31	; 49
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	80 81       	ld	r24, Z
 7a4:	8b 7f       	andi	r24, 0xFB	; 251
 7a6:	8c 93       	st	X, r24

	//Enable Global Interrupt unit
	SET_BIT(SREG,7);
 7a8:	af e5       	ldi	r26, 0x5F	; 95
 7aa:	b0 e0       	ldi	r27, 0x00	; 0
 7ac:	ef e5       	ldi	r30, 0x5F	; 95
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	80 81       	ld	r24, Z
 7b2:	80 68       	ori	r24, 0x80	; 128
 7b4:	8c 93       	st	X, r24

	//Check the needed Trigger level
	switch(typ){
 7b6:	89 81       	ldd	r24, Y+1	; 0x01
 7b8:	28 2f       	mov	r18, r24
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	3b 83       	std	Y+3, r19	; 0x03
 7be:	2a 83       	std	Y+2, r18	; 0x02
 7c0:	8a 81       	ldd	r24, Y+2	; 0x02
 7c2:	9b 81       	ldd	r25, Y+3	; 0x03
 7c4:	81 30       	cpi	r24, 0x01	; 1
 7c6:	91 05       	cpc	r25, r1
 7c8:	21 f1       	breq	.+72     	; 0x812 <INT0_Init+0x86>
 7ca:	2a 81       	ldd	r18, Y+2	; 0x02
 7cc:	3b 81       	ldd	r19, Y+3	; 0x03
 7ce:	22 30       	cpi	r18, 0x02	; 2
 7d0:	31 05       	cpc	r19, r1
 7d2:	2c f4       	brge	.+10     	; 0x7de <INT0_Init+0x52>
 7d4:	8a 81       	ldd	r24, Y+2	; 0x02
 7d6:	9b 81       	ldd	r25, Y+3	; 0x03
 7d8:	00 97       	sbiw	r24, 0x00	; 0
 7da:	61 f0       	breq	.+24     	; 0x7f4 <INT0_Init+0x68>
 7dc:	4d c0       	rjmp	.+154    	; 0x878 <__stack+0x19>
 7de:	2a 81       	ldd	r18, Y+2	; 0x02
 7e0:	3b 81       	ldd	r19, Y+3	; 0x03
 7e2:	22 30       	cpi	r18, 0x02	; 2
 7e4:	31 05       	cpc	r19, r1
 7e6:	21 f1       	breq	.+72     	; 0x830 <INT0_Init+0xa4>
 7e8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ea:	9b 81       	ldd	r25, Y+3	; 0x03
 7ec:	83 30       	cpi	r24, 0x03	; 3
 7ee:	91 05       	cpc	r25, r1
 7f0:	71 f1       	breq	.+92     	; 0x84e <INT0_Init+0xc2>
 7f2:	42 c0       	rjmp	.+132    	; 0x878 <__stack+0x19>
	//Low Level Trigger
	case 0:
		CLEAR_BIT(MCUCR,ISC00);
 7f4:	a5 e5       	ldi	r26, 0x55	; 85
 7f6:	b0 e0       	ldi	r27, 0x00	; 0
 7f8:	e5 e5       	ldi	r30, 0x55	; 85
 7fa:	f0 e0       	ldi	r31, 0x00	; 0
 7fc:	80 81       	ld	r24, Z
 7fe:	8e 7f       	andi	r24, 0xFE	; 254
 800:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR,ISC01);
 802:	a5 e5       	ldi	r26, 0x55	; 85
 804:	b0 e0       	ldi	r27, 0x00	; 0
 806:	e5 e5       	ldi	r30, 0x55	; 85
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	80 81       	ld	r24, Z
 80c:	8d 7f       	andi	r24, 0xFD	; 253
 80e:	8c 93       	st	X, r24
 810:	2c c0       	rjmp	.+88     	; 0x86a <__stack+0xb>
		break;

		//High Level Trigger
	case 1:
		SET_BIT(MCUCR,ISC00);
 812:	a5 e5       	ldi	r26, 0x55	; 85
 814:	b0 e0       	ldi	r27, 0x00	; 0
 816:	e5 e5       	ldi	r30, 0x55	; 85
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	80 81       	ld	r24, Z
 81c:	81 60       	ori	r24, 0x01	; 1
 81e:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR,ISC01);
 820:	a5 e5       	ldi	r26, 0x55	; 85
 822:	b0 e0       	ldi	r27, 0x00	; 0
 824:	e5 e5       	ldi	r30, 0x55	; 85
 826:	f0 e0       	ldi	r31, 0x00	; 0
 828:	80 81       	ld	r24, Z
 82a:	8d 7f       	andi	r24, 0xFD	; 253
 82c:	8c 93       	st	X, r24
 82e:	1d c0       	rjmp	.+58     	; 0x86a <__stack+0xb>
		break;

		//Rising Edge Trigger
	case 2:
		SET_BIT(MCUCR,ISC00);
 830:	a5 e5       	ldi	r26, 0x55	; 85
 832:	b0 e0       	ldi	r27, 0x00	; 0
 834:	e5 e5       	ldi	r30, 0x55	; 85
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	80 81       	ld	r24, Z
 83a:	81 60       	ori	r24, 0x01	; 1
 83c:	8c 93       	st	X, r24
		SET_BIT(MCUCR,ISC01);
 83e:	a5 e5       	ldi	r26, 0x55	; 85
 840:	b0 e0       	ldi	r27, 0x00	; 0
 842:	e5 e5       	ldi	r30, 0x55	; 85
 844:	f0 e0       	ldi	r31, 0x00	; 0
 846:	80 81       	ld	r24, Z
 848:	82 60       	ori	r24, 0x02	; 2
 84a:	8c 93       	st	X, r24
 84c:	0e c0       	rjmp	.+28     	; 0x86a <__stack+0xb>
		break;

		//Falling Edge Trigger
	case 3:
		CLEAR_BIT(MCUCR,ISC00);
 84e:	a5 e5       	ldi	r26, 0x55	; 85
 850:	b0 e0       	ldi	r27, 0x00	; 0
 852:	e5 e5       	ldi	r30, 0x55	; 85
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	80 81       	ld	r24, Z
 858:	8e 7f       	andi	r24, 0xFE	; 254
 85a:	8c 93       	st	X, r24
		SET_BIT(MCUCR,ISC01);
 85c:	a5 e5       	ldi	r26, 0x55	; 85
 85e:	b0 e0       	ldi	r27, 0x00	; 0
 860:	e5 e5       	ldi	r30, 0x55	; 85
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	80 81       	ld	r24, Z
 866:	82 60       	ori	r24, 0x02	; 2
 868:	8c 93       	st	X, r24
		break;
	default: return;
	}
	//Enable INT0 Interrupt unit
	SET_BIT(GICR,INT0);
 86a:	ab e5       	ldi	r26, 0x5B	; 91
 86c:	b0 e0       	ldi	r27, 0x00	; 0
 86e:	eb e5       	ldi	r30, 0x5B	; 91
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	80 81       	ld	r24, Z
 874:	80 64       	ori	r24, 0x40	; 64
 876:	8c 93       	st	X, r24
}
 878:	0f 90       	pop	r0
 87a:	0f 90       	pop	r0
 87c:	0f 90       	pop	r0
 87e:	cf 91       	pop	r28
 880:	df 91       	pop	r29
 882:	08 95       	ret

00000884 <INT1_Init>:

/*Description : Initialization INT1 For Interrupt*/
void INT1_Init(trigger_type typ){
 884:	df 93       	push	r29
 886:	cf 93       	push	r28
 888:	00 d0       	rcall	.+0      	; 0x88a <INT1_Init+0x6>
 88a:	0f 92       	push	r0
 88c:	cd b7       	in	r28, 0x3d	; 61
 88e:	de b7       	in	r29, 0x3e	; 62
 890:	89 83       	std	Y+1, r24	; 0x01
	//Setting PD3/INT1 Pin to be an Input
	CLEAR_BIT(DDRD,PD3);
 892:	a1 e3       	ldi	r26, 0x31	; 49
 894:	b0 e0       	ldi	r27, 0x00	; 0
 896:	e1 e3       	ldi	r30, 0x31	; 49
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	80 81       	ld	r24, Z
 89c:	87 7f       	andi	r24, 0xF7	; 247
 89e:	8c 93       	st	X, r24

	//Enable Global Interrupt unit
	SET_BIT(SREG,7);
 8a0:	af e5       	ldi	r26, 0x5F	; 95
 8a2:	b0 e0       	ldi	r27, 0x00	; 0
 8a4:	ef e5       	ldi	r30, 0x5F	; 95
 8a6:	f0 e0       	ldi	r31, 0x00	; 0
 8a8:	80 81       	ld	r24, Z
 8aa:	80 68       	ori	r24, 0x80	; 128
 8ac:	8c 93       	st	X, r24

	//Check the needed Trigger level
	switch(typ){
 8ae:	89 81       	ldd	r24, Y+1	; 0x01
 8b0:	28 2f       	mov	r18, r24
 8b2:	30 e0       	ldi	r19, 0x00	; 0
 8b4:	3b 83       	std	Y+3, r19	; 0x03
 8b6:	2a 83       	std	Y+2, r18	; 0x02
 8b8:	8a 81       	ldd	r24, Y+2	; 0x02
 8ba:	9b 81       	ldd	r25, Y+3	; 0x03
 8bc:	81 30       	cpi	r24, 0x01	; 1
 8be:	91 05       	cpc	r25, r1
 8c0:	21 f1       	breq	.+72     	; 0x90a <INT1_Init+0x86>
 8c2:	2a 81       	ldd	r18, Y+2	; 0x02
 8c4:	3b 81       	ldd	r19, Y+3	; 0x03
 8c6:	22 30       	cpi	r18, 0x02	; 2
 8c8:	31 05       	cpc	r19, r1
 8ca:	2c f4       	brge	.+10     	; 0x8d6 <INT1_Init+0x52>
 8cc:	8a 81       	ldd	r24, Y+2	; 0x02
 8ce:	9b 81       	ldd	r25, Y+3	; 0x03
 8d0:	00 97       	sbiw	r24, 0x00	; 0
 8d2:	61 f0       	breq	.+24     	; 0x8ec <INT1_Init+0x68>
 8d4:	4d c0       	rjmp	.+154    	; 0x970 <INT1_Init+0xec>
 8d6:	2a 81       	ldd	r18, Y+2	; 0x02
 8d8:	3b 81       	ldd	r19, Y+3	; 0x03
 8da:	22 30       	cpi	r18, 0x02	; 2
 8dc:	31 05       	cpc	r19, r1
 8de:	21 f1       	breq	.+72     	; 0x928 <INT1_Init+0xa4>
 8e0:	8a 81       	ldd	r24, Y+2	; 0x02
 8e2:	9b 81       	ldd	r25, Y+3	; 0x03
 8e4:	83 30       	cpi	r24, 0x03	; 3
 8e6:	91 05       	cpc	r25, r1
 8e8:	71 f1       	breq	.+92     	; 0x946 <INT1_Init+0xc2>
 8ea:	42 c0       	rjmp	.+132    	; 0x970 <INT1_Init+0xec>
	//Low Level Trigger
	case 0:
		CLEAR_BIT(MCUCR,ISC10);
 8ec:	a5 e5       	ldi	r26, 0x55	; 85
 8ee:	b0 e0       	ldi	r27, 0x00	; 0
 8f0:	e5 e5       	ldi	r30, 0x55	; 85
 8f2:	f0 e0       	ldi	r31, 0x00	; 0
 8f4:	80 81       	ld	r24, Z
 8f6:	8b 7f       	andi	r24, 0xFB	; 251
 8f8:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR,ISC11);
 8fa:	a5 e5       	ldi	r26, 0x55	; 85
 8fc:	b0 e0       	ldi	r27, 0x00	; 0
 8fe:	e5 e5       	ldi	r30, 0x55	; 85
 900:	f0 e0       	ldi	r31, 0x00	; 0
 902:	80 81       	ld	r24, Z
 904:	87 7f       	andi	r24, 0xF7	; 247
 906:	8c 93       	st	X, r24
 908:	2c c0       	rjmp	.+88     	; 0x962 <INT1_Init+0xde>
		break;

		//High Level Trigger
	case 1:
		SET_BIT(MCUCR,ISC10);
 90a:	a5 e5       	ldi	r26, 0x55	; 85
 90c:	b0 e0       	ldi	r27, 0x00	; 0
 90e:	e5 e5       	ldi	r30, 0x55	; 85
 910:	f0 e0       	ldi	r31, 0x00	; 0
 912:	80 81       	ld	r24, Z
 914:	84 60       	ori	r24, 0x04	; 4
 916:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR,ISC11);
 918:	a5 e5       	ldi	r26, 0x55	; 85
 91a:	b0 e0       	ldi	r27, 0x00	; 0
 91c:	e5 e5       	ldi	r30, 0x55	; 85
 91e:	f0 e0       	ldi	r31, 0x00	; 0
 920:	80 81       	ld	r24, Z
 922:	87 7f       	andi	r24, 0xF7	; 247
 924:	8c 93       	st	X, r24
 926:	1d c0       	rjmp	.+58     	; 0x962 <INT1_Init+0xde>
		break;

		//Rising Edge Trigger
	case 2:
		SET_BIT(MCUCR,ISC10);
 928:	a5 e5       	ldi	r26, 0x55	; 85
 92a:	b0 e0       	ldi	r27, 0x00	; 0
 92c:	e5 e5       	ldi	r30, 0x55	; 85
 92e:	f0 e0       	ldi	r31, 0x00	; 0
 930:	80 81       	ld	r24, Z
 932:	84 60       	ori	r24, 0x04	; 4
 934:	8c 93       	st	X, r24
		SET_BIT(MCUCR,ISC11);
 936:	a5 e5       	ldi	r26, 0x55	; 85
 938:	b0 e0       	ldi	r27, 0x00	; 0
 93a:	e5 e5       	ldi	r30, 0x55	; 85
 93c:	f0 e0       	ldi	r31, 0x00	; 0
 93e:	80 81       	ld	r24, Z
 940:	88 60       	ori	r24, 0x08	; 8
 942:	8c 93       	st	X, r24
 944:	0e c0       	rjmp	.+28     	; 0x962 <INT1_Init+0xde>
		break;

		//Falling Edge Trigger
	case 3:
		CLEAR_BIT(MCUCR,ISC10);
 946:	a5 e5       	ldi	r26, 0x55	; 85
 948:	b0 e0       	ldi	r27, 0x00	; 0
 94a:	e5 e5       	ldi	r30, 0x55	; 85
 94c:	f0 e0       	ldi	r31, 0x00	; 0
 94e:	80 81       	ld	r24, Z
 950:	8b 7f       	andi	r24, 0xFB	; 251
 952:	8c 93       	st	X, r24
		SET_BIT(MCUCR,ISC11);
 954:	a5 e5       	ldi	r26, 0x55	; 85
 956:	b0 e0       	ldi	r27, 0x00	; 0
 958:	e5 e5       	ldi	r30, 0x55	; 85
 95a:	f0 e0       	ldi	r31, 0x00	; 0
 95c:	80 81       	ld	r24, Z
 95e:	88 60       	ori	r24, 0x08	; 8
 960:	8c 93       	st	X, r24
		break;
	default: return;
	}
	//Enable INT0 Interrupt unit
	SET_BIT(GICR,INT1);
 962:	ab e5       	ldi	r26, 0x5B	; 91
 964:	b0 e0       	ldi	r27, 0x00	; 0
 966:	eb e5       	ldi	r30, 0x5B	; 91
 968:	f0 e0       	ldi	r31, 0x00	; 0
 96a:	80 81       	ld	r24, Z
 96c:	80 68       	ori	r24, 0x80	; 128
 96e:	8c 93       	st	X, r24
}
 970:	0f 90       	pop	r0
 972:	0f 90       	pop	r0
 974:	0f 90       	pop	r0
 976:	cf 91       	pop	r28
 978:	df 91       	pop	r29
 97a:	08 95       	ret

0000097c <INT2_Init>:

/*Description : Initialization INT2 For Interrupt*/
void INT2_Init(trigger_type typ){
 97c:	df 93       	push	r29
 97e:	cf 93       	push	r28
 980:	00 d0       	rcall	.+0      	; 0x982 <INT2_Init+0x6>
 982:	0f 92       	push	r0
 984:	cd b7       	in	r28, 0x3d	; 61
 986:	de b7       	in	r29, 0x3e	; 62
 988:	89 83       	std	Y+1, r24	; 0x01
	//Setting PB2/INT2 Pin to be an Input
	CLEAR_BIT(DDRB,PB2);
 98a:	a7 e3       	ldi	r26, 0x37	; 55
 98c:	b0 e0       	ldi	r27, 0x00	; 0
 98e:	e7 e3       	ldi	r30, 0x37	; 55
 990:	f0 e0       	ldi	r31, 0x00	; 0
 992:	80 81       	ld	r24, Z
 994:	8b 7f       	andi	r24, 0xFB	; 251
 996:	8c 93       	st	X, r24

	//Enable Global Interrupt unit (I-BIT)
	SET_BIT(SREG,7);
 998:	af e5       	ldi	r26, 0x5F	; 95
 99a:	b0 e0       	ldi	r27, 0x00	; 0
 99c:	ef e5       	ldi	r30, 0x5F	; 95
 99e:	f0 e0       	ldi	r31, 0x00	; 0
 9a0:	80 81       	ld	r24, Z
 9a2:	80 68       	ori	r24, 0x80	; 128
 9a4:	8c 93       	st	X, r24

	//Check the needed Trigger level
	switch(typ){
 9a6:	89 81       	ldd	r24, Y+1	; 0x01
 9a8:	28 2f       	mov	r18, r24
 9aa:	30 e0       	ldi	r19, 0x00	; 0
 9ac:	3b 83       	std	Y+3, r19	; 0x03
 9ae:	2a 83       	std	Y+2, r18	; 0x02
 9b0:	8a 81       	ldd	r24, Y+2	; 0x02
 9b2:	9b 81       	ldd	r25, Y+3	; 0x03
 9b4:	82 30       	cpi	r24, 0x02	; 2
 9b6:	91 05       	cpc	r25, r1
 9b8:	31 f0       	breq	.+12     	; 0x9c6 <INT2_Init+0x4a>
 9ba:	2a 81       	ldd	r18, Y+2	; 0x02
 9bc:	3b 81       	ldd	r19, Y+3	; 0x03
 9be:	23 30       	cpi	r18, 0x03	; 3
 9c0:	31 05       	cpc	r19, r1
 9c2:	49 f0       	breq	.+18     	; 0x9d6 <INT2_Init+0x5a>
 9c4:	16 c0       	rjmp	.+44     	; 0x9f2 <INT2_Init+0x76>
		//Rising Edge Trigger
	case 2:
		SET_BIT(MCUCSR,ISC2);
 9c6:	a4 e5       	ldi	r26, 0x54	; 84
 9c8:	b0 e0       	ldi	r27, 0x00	; 0
 9ca:	e4 e5       	ldi	r30, 0x54	; 84
 9cc:	f0 e0       	ldi	r31, 0x00	; 0
 9ce:	80 81       	ld	r24, Z
 9d0:	80 64       	ori	r24, 0x40	; 64
 9d2:	8c 93       	st	X, r24
 9d4:	07 c0       	rjmp	.+14     	; 0x9e4 <INT2_Init+0x68>
		break;
		//Falling Edge Trigger
	case 3:
		CLEAR_BIT(MCUCSR,ISC2);
 9d6:	a4 e5       	ldi	r26, 0x54	; 84
 9d8:	b0 e0       	ldi	r27, 0x00	; 0
 9da:	e4 e5       	ldi	r30, 0x54	; 84
 9dc:	f0 e0       	ldi	r31, 0x00	; 0
 9de:	80 81       	ld	r24, Z
 9e0:	8f 7b       	andi	r24, 0xBF	; 191
 9e2:	8c 93       	st	X, r24
		break;
	default: return;
	}
	//Enable INT2 Interrupt unit
	SET_BIT(GICR,INT2);
 9e4:	ab e5       	ldi	r26, 0x5B	; 91
 9e6:	b0 e0       	ldi	r27, 0x00	; 0
 9e8:	eb e5       	ldi	r30, 0x5B	; 91
 9ea:	f0 e0       	ldi	r31, 0x00	; 0
 9ec:	80 81       	ld	r24, Z
 9ee:	80 62       	ori	r24, 0x20	; 32
 9f0:	8c 93       	st	X, r24
}
 9f2:	0f 90       	pop	r0
 9f4:	0f 90       	pop	r0
 9f6:	0f 90       	pop	r0
 9f8:	cf 91       	pop	r28
 9fa:	df 91       	pop	r29
 9fc:	08 95       	ret

000009fe <__vector_1>:

/*ISR Code*/

/*Description : Interrupted code for INT0*/
ISR (INT0_vect){
 9fe:	1f 92       	push	r1
 a00:	0f 92       	push	r0
 a02:	0f b6       	in	r0, 0x3f	; 63
 a04:	0f 92       	push	r0
 a06:	11 24       	eor	r1, r1
 a08:	8f 93       	push	r24
 a0a:	df 93       	push	r29
 a0c:	cf 93       	push	r28
 a0e:	cd b7       	in	r28, 0x3d	; 61
 a10:	de b7       	in	r29, 0x3e	; 62
	if(i == 1){
 a12:	80 91 65 00 	lds	r24, 0x0065
 a16:	81 30       	cpi	r24, 0x01	; 1
 a18:	51 f0       	breq	.+20     	; 0xa2e <__vector_1+0x30>
		// for double click or long press Interrupt canceling
	}
	else{
		INT0_FLAG = 1;
 a1a:	81 e0       	ldi	r24, 0x01	; 1
 a1c:	80 93 64 00 	sts	0x0064, r24
		HALF_SEC_TICKS = 0;
 a20:	10 92 62 00 	sts	0x0062, r1
		FIVE_SEC_TICKS = 0;
 a24:	10 92 60 00 	sts	0x0060, r1
		i = 1;
 a28:	81 e0       	ldi	r24, 0x01	; 1
 a2a:	80 93 65 00 	sts	0x0065, r24
	}
}
 a2e:	cf 91       	pop	r28
 a30:	df 91       	pop	r29
 a32:	8f 91       	pop	r24
 a34:	0f 90       	pop	r0
 a36:	0f be       	out	0x3f, r0	; 63
 a38:	0f 90       	pop	r0
 a3a:	1f 90       	pop	r1
 a3c:	18 95       	reti

00000a3e <__vector_2>:

/*Description : Interrupted code for INT1*/
ISR (INT1_vect){
 a3e:	1f 92       	push	r1
 a40:	0f 92       	push	r0
 a42:	0f b6       	in	r0, 0x3f	; 63
 a44:	0f 92       	push	r0
 a46:	11 24       	eor	r1, r1
 a48:	df 93       	push	r29
 a4a:	cf 93       	push	r28
 a4c:	cd b7       	in	r28, 0x3d	; 61
 a4e:	de b7       	in	r29, 0x3e	; 62

}
 a50:	cf 91       	pop	r28
 a52:	df 91       	pop	r29
 a54:	0f 90       	pop	r0
 a56:	0f be       	out	0x3f, r0	; 63
 a58:	0f 90       	pop	r0
 a5a:	1f 90       	pop	r1
 a5c:	18 95       	reti

00000a5e <__vector_3>:

/*Description : Interrupted code for INT2*/
ISR (INT2_vect){
 a5e:	1f 92       	push	r1
 a60:	0f 92       	push	r0
 a62:	0f b6       	in	r0, 0x3f	; 63
 a64:	0f 92       	push	r0
 a66:	11 24       	eor	r1, r1
 a68:	df 93       	push	r29
 a6a:	cf 93       	push	r28
 a6c:	cd b7       	in	r28, 0x3d	; 61
 a6e:	de b7       	in	r29, 0x3e	; 62

}
 a70:	cf 91       	pop	r28
 a72:	df 91       	pop	r29
 a74:	0f 90       	pop	r0
 a76:	0f be       	out	0x3f, r0	; 63
 a78:	0f 90       	pop	r0
 a7a:	1f 90       	pop	r1
 a7c:	18 95       	reti

00000a7e <led_Init>:

/* Description:
 * Setting all pins (0-1-2) in PORTA & PORTB To be OUTPUT Pins
 * return type: Void
 */
void led_Init(void){
 a7e:	df 93       	push	r29
 a80:	cf 93       	push	r28
 a82:	cd b7       	in	r28, 0x3d	; 61
 a84:	de b7       	in	r29, 0x3e	; 62
	DDRA  |= (1<<PA0)|(1<<PA1)|(1<<PA2);
 a86:	aa e3       	ldi	r26, 0x3A	; 58
 a88:	b0 e0       	ldi	r27, 0x00	; 0
 a8a:	ea e3       	ldi	r30, 0x3A	; 58
 a8c:	f0 e0       	ldi	r31, 0x00	; 0
 a8e:	80 81       	ld	r24, Z
 a90:	87 60       	ori	r24, 0x07	; 7
 a92:	8c 93       	st	X, r24
	DDRB  |= (1<<PB0)|(1<<PB1)|(1<<PB2);
 a94:	a7 e3       	ldi	r26, 0x37	; 55
 a96:	b0 e0       	ldi	r27, 0x00	; 0
 a98:	e7 e3       	ldi	r30, 0x37	; 55
 a9a:	f0 e0       	ldi	r31, 0x00	; 0
 a9c:	80 81       	ld	r24, Z
 a9e:	87 60       	ori	r24, 0x07	; 7
 aa0:	8c 93       	st	X, r24
}
 aa2:	cf 91       	pop	r28
 aa4:	df 91       	pop	r29
 aa6:	08 95       	ret

00000aa8 <carTraffic_GREEN_LED>:
*********************************************************************************************/
/* Description:
 * Setting GREEN led at pin 2 PORTA
 * return type: Void
 */
void carTraffic_GREEN_LED(void){
 aa8:	df 93       	push	r29
 aaa:	cf 93       	push	r28
 aac:	cd b7       	in	r28, 0x3d	; 61
 aae:	de b7       	in	r29, 0x3e	; 62
	PORTA = (1<<PA2);
 ab0:	eb e3       	ldi	r30, 0x3B	; 59
 ab2:	f0 e0       	ldi	r31, 0x00	; 0
 ab4:	84 e0       	ldi	r24, 0x04	; 4
 ab6:	80 83       	st	Z, r24
}
 ab8:	cf 91       	pop	r28
 aba:	df 91       	pop	r29
 abc:	08 95       	ret

00000abe <carTraffic_RED_LED>:

/* Description:
 * Setting RED led at pin 0 PORTA
 * return type: Void
 */
void carTraffic_RED_LED(void){
 abe:	df 93       	push	r29
 ac0:	cf 93       	push	r28
 ac2:	cd b7       	in	r28, 0x3d	; 61
 ac4:	de b7       	in	r29, 0x3e	; 62
	PORTA = (1<<PA0);
 ac6:	eb e3       	ldi	r30, 0x3B	; 59
 ac8:	f0 e0       	ldi	r31, 0x00	; 0
 aca:	81 e0       	ldi	r24, 0x01	; 1
 acc:	80 83       	st	Z, r24
}
 ace:	cf 91       	pop	r28
 ad0:	df 91       	pop	r29
 ad2:	08 95       	ret

00000ad4 <carTraffic_YELLOW_LED>:

/* Description:
 * Toggling yellow led at pin 1 PORTA
 * return type: Void
 */
void carTraffic_YELLOW_LED(void){
 ad4:	df 93       	push	r29
 ad6:	cf 93       	push	r28
 ad8:	cd b7       	in	r28, 0x3d	; 61
 ada:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_FLAG_HALF_SEC == 1){
 adc:	80 91 63 00 	lds	r24, 0x0063
 ae0:	81 30       	cpi	r24, 0x01	; 1
 ae2:	89 f4       	brne	.+34     	; 0xb06 <carTraffic_YELLOW_LED+0x32>
		//Reset PORTA PIN PA0
		PORTA &= ~(1<<PA0);
 ae4:	ab e3       	ldi	r26, 0x3B	; 59
 ae6:	b0 e0       	ldi	r27, 0x00	; 0
 ae8:	eb e3       	ldi	r30, 0x3B	; 59
 aea:	f0 e0       	ldi	r31, 0x00	; 0
 aec:	80 81       	ld	r24, Z
 aee:	8e 7f       	andi	r24, 0xFE	; 254
 af0:	8c 93       	st	X, r24
		//Toggle PORTA PIN PA1 & Same as PB1
		TOGGLE_BIT(PORTA,PA1);
 af2:	ab e3       	ldi	r26, 0x3B	; 59
 af4:	b0 e0       	ldi	r27, 0x00	; 0
 af6:	eb e3       	ldi	r30, 0x3B	; 59
 af8:	f0 e0       	ldi	r31, 0x00	; 0
 afa:	90 81       	ld	r25, Z
 afc:	82 e0       	ldi	r24, 0x02	; 2
 afe:	89 27       	eor	r24, r25
 b00:	8c 93       	st	X, r24
		//Reset Timer half sec flag
		TIMER0_FLAG_HALF_SEC = 0;
 b02:	10 92 63 00 	sts	0x0063, r1
	}
}
 b06:	cf 91       	pop	r28
 b08:	df 91       	pop	r29
 b0a:	08 95       	ret

00000b0c <Traffics_YELLOW_LED_TOGGLE>:

/* Description:
 * Toggling yellow led at pin 1 PORTA & pin 1 PORTB
 * return type: Void
 */
void Traffics_YELLOW_LED_TOGGLE(void){
 b0c:	df 93       	push	r29
 b0e:	cf 93       	push	r28
 b10:	cd b7       	in	r28, 0x3d	; 61
 b12:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_FLAG_HALF_SEC == 1){
 b14:	80 91 63 00 	lds	r24, 0x0063
 b18:	81 30       	cpi	r24, 0x01	; 1
 b1a:	c9 f4       	brne	.+50     	; 0xb4e <Traffics_YELLOW_LED_TOGGLE+0x42>

		//Reset PORTA PIN PA0
		CLEAR_BIT(PORTA,PA0);
 b1c:	ab e3       	ldi	r26, 0x3B	; 59
 b1e:	b0 e0       	ldi	r27, 0x00	; 0
 b20:	eb e3       	ldi	r30, 0x3B	; 59
 b22:	f0 e0       	ldi	r31, 0x00	; 0
 b24:	80 81       	ld	r24, Z
 b26:	8e 7f       	andi	r24, 0xFE	; 254
 b28:	8c 93       	st	X, r24

		//Toggle PORTA PIN PA1 & Same as PB1
		TOGGLE_BIT(PORTA,PA1);
 b2a:	ab e3       	ldi	r26, 0x3B	; 59
 b2c:	b0 e0       	ldi	r27, 0x00	; 0
 b2e:	eb e3       	ldi	r30, 0x3B	; 59
 b30:	f0 e0       	ldi	r31, 0x00	; 0
 b32:	90 81       	ld	r25, Z
 b34:	82 e0       	ldi	r24, 0x02	; 2
 b36:	89 27       	eor	r24, r25
 b38:	8c 93       	st	X, r24
		TOGGLE_BIT(PORTB,PB1);
 b3a:	a8 e3       	ldi	r26, 0x38	; 56
 b3c:	b0 e0       	ldi	r27, 0x00	; 0
 b3e:	e8 e3       	ldi	r30, 0x38	; 56
 b40:	f0 e0       	ldi	r31, 0x00	; 0
 b42:	90 81       	ld	r25, Z
 b44:	82 e0       	ldi	r24, 0x02	; 2
 b46:	89 27       	eor	r24, r25
 b48:	8c 93       	st	X, r24

		//Reset Timer half sec flag
		TIMER0_FLAG_HALF_SEC = 0;
 b4a:	10 92 63 00 	sts	0x0063, r1
	}
}
 b4e:	cf 91       	pop	r28
 b50:	df 91       	pop	r29
 b52:	08 95       	ret

00000b54 <pedTraffic_GREEN_LED>:

/* Description:
 * Setting Green led at pin 2 PORTB
 * return type: Void
 */
void pedTraffic_GREEN_LED(void){
 b54:	df 93       	push	r29
 b56:	cf 93       	push	r28
 b58:	cd b7       	in	r28, 0x3d	; 61
 b5a:	de b7       	in	r29, 0x3e	; 62
	PORTB = (1<<PB2);
 b5c:	e8 e3       	ldi	r30, 0x38	; 56
 b5e:	f0 e0       	ldi	r31, 0x00	; 0
 b60:	84 e0       	ldi	r24, 0x04	; 4
 b62:	80 83       	st	Z, r24
}
 b64:	cf 91       	pop	r28
 b66:	df 91       	pop	r29
 b68:	08 95       	ret

00000b6a <pedTraffic_RED_LED>:

/* Description:
 * Setting Red led at pin 0 PORTB
 * return type: Void
 */
void pedTraffic_RED_LED(void){
 b6a:	df 93       	push	r29
 b6c:	cf 93       	push	r28
 b6e:	cd b7       	in	r28, 0x3d	; 61
 b70:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTB,PB0);
 b72:	a8 e3       	ldi	r26, 0x38	; 56
 b74:	b0 e0       	ldi	r27, 0x00	; 0
 b76:	e8 e3       	ldi	r30, 0x38	; 56
 b78:	f0 e0       	ldi	r31, 0x00	; 0
 b7a:	80 81       	ld	r24, Z
 b7c:	81 60       	ori	r24, 0x01	; 1
 b7e:	8c 93       	st	X, r24
}
 b80:	cf 91       	pop	r28
 b82:	df 91       	pop	r29
 b84:	08 95       	ret

00000b86 <main>:
extern uint8 TIMER0_FLAG_5_SEC;

/*Car Traffic light initial color*/
uint8 trafficLight = RED;

int main(void){
 b86:	df 93       	push	r29
 b88:	cf 93       	push	r28
 b8a:	cd b7       	in	r28, 0x3d	; 61
 b8c:	de b7       	in	r29, 0x3e	; 62
	// Configure the led pin as output pin.
	led_Init();
 b8e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <led_Init>

	//Enable global interrupts in MC by setting the I-Bit.
	SET_BIT(SREG,7);
 b92:	af e5       	ldi	r26, 0x5F	; 95
 b94:	b0 e0       	ldi	r27, 0x00	; 0
 b96:	ef e5       	ldi	r30, 0x5F	; 95
 b98:	f0 e0       	ldi	r31, 0x00	; 0
 b9a:	80 81       	ld	r24, Z
 b9c:	80 68       	ori	r24, 0x80	; 128
 b9e:	8c 93       	st	X, r24

	//start the timer.
	Timer0_Init_Normal_Mode();
 ba0:	0e 94 3c 00 	call	0x78	; 0x78 <Timer0_Init_Normal_Mode>
	//Enable External Interrupt
	INT0_Init(2);
 ba4:	82 e0       	ldi	r24, 0x02	; 2
 ba6:	0e 94 c6 03 	call	0x78c	; 0x78c <INT0_Init>

	while(1){
		//Check for Interrupt Happened or not
		if(INT0_FLAG == 1){
 baa:	80 91 64 00 	lds	r24, 0x0064
 bae:	81 30       	cpi	r24, 0x01	; 1
 bb0:	a1 f5       	brne	.+104    	; 0xc1a <main+0x94>

			//Change Car Traffic color every 5 sec.
			if(TIMER0_FLAG_5_SEC == 1){
 bb2:	80 91 61 00 	lds	r24, 0x0061
 bb6:	81 30       	cpi	r24, 0x01	; 1
 bb8:	39 f4       	brne	.+14     	; 0xbc8 <main+0x42>
				trafficLight++;			//Change the traffic color every 5 sec.
 bba:	80 91 67 00 	lds	r24, 0x0067
 bbe:	8f 5f       	subi	r24, 0xFF	; 255
 bc0:	80 93 67 00 	sts	0x0067, r24
				TIMER0_FLAG_5_SEC = 0;	//Reset timer 5 sec flag
 bc4:	10 92 61 00 	sts	0x0061, r1
			}

			//The person crossed the street when pedestrian was green so know the interrupt finished
			if( (trafficLight==YELLOW)&&(FINISH_FLAG == 1) ) {
 bc8:	80 91 67 00 	lds	r24, 0x0067
 bcc:	81 30       	cpi	r24, 0x01	; 1
 bce:	51 f4       	brne	.+20     	; 0xbe4 <main+0x5e>
 bd0:	80 91 66 00 	lds	r24, 0x0066
 bd4:	81 30       	cpi	r24, 0x01	; 1
 bd6:	31 f4       	brne	.+12     	; 0xbe4 <main+0x5e>
				INT0_FLAG = 0 ;		//For exit the Interrupt
 bd8:	10 92 64 00 	sts	0x0064, r1
				FINISH_FLAG = 0;	//Reseting the Finishing flag to 0
 bdc:	10 92 66 00 	sts	0x0066, r1
				i=0;				//Finished last Interrupt code Begain new Interrupt
 be0:	10 92 65 00 	sts	0x0065, r1
			}

			//The car traffic is Red then pedestrian is Green
			if(trafficLight == RED){
 be4:	80 91 67 00 	lds	r24, 0x0067
 be8:	88 23       	and	r24, r24
 bea:	41 f4       	brne	.+16     	; 0xbfc <main+0x76>
				carTraffic_RED_LED(); //Red car traffic is on
 bec:	0e 94 5f 05 	call	0xabe	; 0xabe <carTraffic_RED_LED>
				pedTraffic_GREEN_LED(); //Green pedestrian traffic is on
 bf0:	0e 94 aa 05 	call	0xb54	; 0xb54 <pedTraffic_GREEN_LED>
				FINISH_FLAG = 1;	//Rising finished flag
 bf4:	81 e0       	ldi	r24, 0x01	; 1
 bf6:	80 93 66 00 	sts	0x0066, r24
 bfa:	d7 cf       	rjmp	.-82     	; 0xbaa <main+0x24>
			}

			//The car traffic is Green Or Yellow
			else {
				CLEAR_BIT(PORTA,PA2);
 bfc:	ab e3       	ldi	r26, 0x3B	; 59
 bfe:	b0 e0       	ldi	r27, 0x00	; 0
 c00:	eb e3       	ldi	r30, 0x3B	; 59
 c02:	f0 e0       	ldi	r31, 0x00	; 0
 c04:	80 81       	ld	r24, Z
 c06:	8b 7f       	andi	r24, 0xFB	; 251
 c08:	8c 93       	st	X, r24
				//Flashing Yellow led in both pedestrian & car Traffic
				Traffics_YELLOW_LED_TOGGLE();
 c0a:	0e 94 86 05 	call	0xb0c	; 0xb0c <Traffics_YELLOW_LED_TOGGLE>
				pedTraffic_RED_LED();	//Red pedestrian traffic is on
 c0e:	0e 94 b5 05 	call	0xb6a	; 0xb6a <pedTraffic_RED_LED>
				trafficLight = -1;	//reset car traffic light
 c12:	8f ef       	ldi	r24, 0xFF	; 255
 c14:	80 93 67 00 	sts	0x0067, r24
 c18:	c8 cf       	rjmp	.-112    	; 0xbaa <main+0x24>
		}

		//Car traffic without any Interrupt
		else{
			//Setting PORTB To 0
			CLEAR_BIT(PORTB,0);
 c1a:	a8 e3       	ldi	r26, 0x38	; 56
 c1c:	b0 e0       	ldi	r27, 0x00	; 0
 c1e:	e8 e3       	ldi	r30, 0x38	; 56
 c20:	f0 e0       	ldi	r31, 0x00	; 0
 c22:	80 81       	ld	r24, Z
 c24:	8e 7f       	andi	r24, 0xFE	; 254
 c26:	8c 93       	st	X, r24
			CLEAR_BIT(PORTB,1);
 c28:	a8 e3       	ldi	r26, 0x38	; 56
 c2a:	b0 e0       	ldi	r27, 0x00	; 0
 c2c:	e8 e3       	ldi	r30, 0x38	; 56
 c2e:	f0 e0       	ldi	r31, 0x00	; 0
 c30:	80 81       	ld	r24, Z
 c32:	8d 7f       	andi	r24, 0xFD	; 253
 c34:	8c 93       	st	X, r24
			CLEAR_BIT(PORTB,2);
 c36:	a8 e3       	ldi	r26, 0x38	; 56
 c38:	b0 e0       	ldi	r27, 0x00	; 0
 c3a:	e8 e3       	ldi	r30, 0x38	; 56
 c3c:	f0 e0       	ldi	r31, 0x00	; 0
 c3e:	80 81       	ld	r24, Z
 c40:	8b 7f       	andi	r24, 0xFB	; 251
 c42:	8c 93       	st	X, r24

			//Change Car Traffic color every 5 sec.
			if(TIMER0_FLAG_5_SEC == 1){
 c44:	80 91 61 00 	lds	r24, 0x0061
 c48:	81 30       	cpi	r24, 0x01	; 1
 c4a:	39 f4       	brne	.+14     	; 0xc5a <main+0xd4>
				trafficLight++;			//Change the traffic color every 5 sec.
 c4c:	80 91 67 00 	lds	r24, 0x0067
 c50:	8f 5f       	subi	r24, 0xFF	; 255
 c52:	80 93 67 00 	sts	0x0067, r24
				TIMER0_FLAG_5_SEC = 0;	//Reset timer 5 sec flag
 c56:	10 92 61 00 	sts	0x0061, r1
			}

			//The car traffic is Red then pedestrian is Green
			if(trafficLight == RED){
 c5a:	80 91 67 00 	lds	r24, 0x0067
 c5e:	88 23       	and	r24, r24
 c60:	19 f4       	brne	.+6      	; 0xc68 <main+0xe2>
				carTraffic_RED_LED(); //Red car traffic is on
 c62:	0e 94 5f 05 	call	0xabe	; 0xabe <carTraffic_RED_LED>
 c66:	a1 cf       	rjmp	.-190    	; 0xbaa <main+0x24>
			}
			//The car traffic is Yellow
			else if(trafficLight == YELLOW){
 c68:	80 91 67 00 	lds	r24, 0x0067
 c6c:	81 30       	cpi	r24, 0x01	; 1
 c6e:	19 f4       	brne	.+6      	; 0xc76 <main+0xf0>
				//Flashing Yellow led in car Traffic
				carTraffic_YELLOW_LED();
 c70:	0e 94 6a 05 	call	0xad4	; 0xad4 <carTraffic_YELLOW_LED>
 c74:	9a cf       	rjmp	.-204    	; 0xbaa <main+0x24>
			}
			//The car traffic is Green
			else {
				carTraffic_GREEN_LED();	//Green car traffic is on
 c76:	0e 94 54 05 	call	0xaa8	; 0xaa8 <carTraffic_GREEN_LED>
				trafficLight = -1;	//reset car traffic light
 c7a:	8f ef       	ldi	r24, 0xFF	; 255
 c7c:	80 93 67 00 	sts	0x0067, r24
 c80:	94 cf       	rjmp	.-216    	; 0xbaa <main+0x24>

00000c82 <_exit>:
 c82:	f8 94       	cli

00000c84 <__stop_program>:
 c84:	ff cf       	rjmp	.-2      	; 0xc84 <__stop_program>
